<template>
  <view class="container">
    <view class="back-home-menu" @tap="backHome">
      <image mode="aspectFit" src="../images/home_back.png"/>
    </view>
    
    <view class="share-song-menu">
      <image mode="aspectFit" src="../images/share.png"/>
      <button open-type="share"></button>
    </view>
    
    <text class="info-author" @tap="getAuthorInfo">歌手：{{musicInfo.songinfo.author}}</text>
    <text class="info-album" bindtap="getAlbumInfo">专辑：{{musicInfo.songinfo.album_title}}</text>
    <image class="{{hasAnim ? 'info-img-anim' : 'info-img'}}" mode="widthFix" src="{{musicImg}}" @tap="showBigImg"/>

    <view class="menu-container">
      <view class="slider-container">
        <text class="slider-time">{{startTime}}</text>
        <slider class="slider" bindchange="slider4Change" bindchanging="slider4Changing" min="0" max="100" block-size="12" step="0.1" value="{{sliderValue}}"/>
        <text class="slider-time">{{endTime}}</text>
      </view>
      <view class="menu">
        <image class="menu-icon play-mode" src="{{playModeIcon}}" @tap="switchPlayMode"></image>
        <view  class="music-menu">
          <image class="menu-icon pre" src="../images/pre.png" bindtap="pre"></image>
          <image class="menu-icon pause" src="{{pausedIcon}}" bindtap="pauseOrPlay"></image>
          <image class="menu-icon next" src="../images/next.png" bindtap="next"></image>
        </view>
        <image class="menu-icon list" src="../images/list.png" bindtap="playList"></image>
      </view>
    </view>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import BasePage from './basepage'
  import HttpRequest from '../utils/http-request'
  import ToastUtil from '../utils/toast-util'
  import LocalMusicInfo from '../utils/save-music-info'
  import {STORE_KEY} from '../utils/const'

  export default class SongItemInfo extends BasePage {
    config = {
      navigationBarTitleText: '歌曲信息',
    }
    components = {
    }

    data = {
      songId: '',
      musicInfo: undefined,
      musicImg: '',
      backgroundAudioManager: undefined,
      pausedIcon: "../images/play.png",
      Const: undefined,
      playMode: undefined,
      playModeIcon: '../images/list_cycle.png',
      sliderValue: 1,
      startTime: '00:00',
      endTime: '00:00',
      hasAnim: true,
      currentPlaySongId: undefined,
    }

    computed = {
      
    }

    methods = {
      getAlbumInfo(e) {
        console.log("getAlbumInfo ->" + e);
      },

      getAuthorInfo(e) {
        console.log("getAuthorInfo() ->" + e);
      },

      switchPlayMode(e) {
        if (this.playMode === this.Const.PLAY_MODE.LIST_CYCLE) {
          this.playMode = this.Const.PLAY_MODE.ONE_CYCLE;
          this.playModeIcon = '../images/single_cycle.png';

        } else if(this.playMode === this.Const.PLAY_MODE.ONE_CYCLE) {
          this.playMode = this.Const.PLAY_MODE.RANDOM_CYCLE;
          this.playModeIcon = '../images/random_cycle.png';

        } else if (this.playMode === this.Const.PLAY_MODE.RANDOM_CYCLE) {
          this.playMode = this.Const.PLAY_MODE.LIST_CYCLE;
          this.playModeIcon = '../images/list_cycle.png';
        }
        this.$apply();
      },

      pre(e) {
        this.playPre();
      },

      pauseOrPlay(e) {
        let paused = this.backgroundAudioManager.paused;
        if (paused) {
          this.playMusic();
        } else {
          this.pauseAudio();
        }
      },

      next(e) {
        this.playNext();
      },

      playList(e) {
        wepy.navigateTo({
          url: '/pages/songlist'
        });
      },

      showBigImg(e) {
        wepy.previewImage({
          current: this.musicImg,
          urls: [this.musicImg],
        });
      },

      slider4Change(e) {
        this.changeSliderValue(e.detail.value);
        wepy.playBackgroundAudio();
      },

      slider4Changing(e) {
        wepy.pauseBackgroundAudio();
        this.changeSliderValue(e.detail.value);
      },

      backHome(e) {
        wepy.switchTab({
          url: '/pages/network',
        });
      }
    }

    changeSliderValue(currentValue) {
        var seek = (currentValue/100) * this.musicInfo.bitrate.file_duration;
        this.backgroundAudioManager.seek(seek);
    }

    onShow(res) {
      var updateSongId = wepy.getStorageSync(STORE_KEY.UPDATE_PLAY_SONG_ID);
      if (updateSongId) {
        if (updateSongId === this.songId) {
          return;
        }
        if (!this.backgroundAudioManager) {
          return;
        }
        this.backgroundAudioManager.stop();
        this.songId = updateSongId;
        this.$apply();
        this.getMusicInfo();
        wepy.removeStorageSync(STORE_KEY.UPDATE_PLAY_SONG_ID);
      }
    }

    onLoad(options) {
      this.songId = options.song_id;
    }

    onReady() {
      //此处返回的是一个Promise对象，可链式调用，估计是wepy的封装
      var state = wepy.getBackgroundAudioPlayerState();
      var that = this;
      state.then(function(e) {
        console.log('song playing->' + e);
        that.currentPlaySongId = wepy.getStorageSync(STORE_KEY.CURRENT_PALY_SONG_ID);
        that.setSongData();

      }, function(e) {
        console.log('no playing->' + e);
        that.setSongData();

      }).catch(function(e) {
        console.log(e);
        console.log('catch->');
      });
    }

    setSongData() {
      this.getMusicInfo();
      this.Const = require('../utils/const');
      this.playMode = this.Const.PLAY_MODE.LIST_CYCLE;
      this.$apply();
    }

    async getMusicInfo() {
      let res = await HttpRequest.getMusicInfo(this.songId);
      this.musicInfo = res.data;

      this.setNavigationBarMusicTitle(this.musicInfo.songinfo.title);
      this.setMusicImg();
      this.playMusic();
      this.initAudioMananger();
      this.initMusicTime();
      this.saveSongInfo();
      this.$apply();
    }

    //缓存最近播放歌曲列表
    saveSongInfo() {
      LocalMusicInfo.saveSongInfo(this.songId, this.musicInfo);
    }

    setNavigationBarMusicTitle(songTitle) {
      if (songTitle) {
        wepy.setNavigationBarTitle({
          title: songTitle,
        });
      }
    }

    setMusicImg() {
      this.musicImg = this.musicInfo.songinfo.pic_huge;
      if (!this.musicImg) {
        this.musicImg = this.musicInfo.songinfo.pic_big;
      }
      if (!this.musicImg) {
        this.musicImg = this.musicInfo.songinfo.pic_premium;
      }
      if (!this.musicImg) {
        this.musicImg = this.musicInfo.songinfo.pic_small;
      }
      //默认图片
      if (!this.musicImg) {
        this.musicImg = "http://p4.music.126.net/53yErDUlZ6cP9GhK6EnZig==/1399678303632262.jpg";
      }
    }

    playNext() {
      this.songId = LocalMusicInfo.getNextSongInfo(this.songId);
      this.getMusicInfo();
    }

    playPre() {
      this.songId = LocalMusicInfo.getPreSongInfo(this.songId);
      this.getMusicInfo();
    }
    playMusic() {
      if (!this.musicInfo.bitrate.file_link) {
        ToastUtil.showToast('没有有效的歌曲文件');
        this.hasAnim = false;
        return;
      }
      console.log(this.currentPlaySongId);
      console.log(this.songId);
      if (this.currentPlaySongId) {
        if (this.currentPlaySongId === this.songId) {
          console.log('currentPlaySongId:' + this.currentPlaySongId + ', songId:' + this.songId);
          console.log('play the same song id.');
        } else {
          this.playSongAudio();
        }
      } else {
        this.playSongAudio();
      }
      
      this.pausedIcon = "../images/play.png";
      this.hasAnim = true;
      this.$apply();
    }

    playSongAudio() {
      wepy.playBackgroundAudio({
        dataUrl: this.musicInfo.bitrate.file_link,
        title: this.musicInfo.songinfo.title,
        coverImgUrl: this.musicImg,
      });
      wepy.setStorageSync(STORE_KEY.CURRENT_PALY_SONG_ID, this.songId);
    }

    initAudioMananger() {
      let that = this;
      this.backgroundAudioManager = wepy.getBackgroundAudioManager();
      this.backgroundAudioManager.onStop(function(e) {
        that.pauseAudio(e);
      });
      this.backgroundAudioManager.onPause(function(e) {
        that.pauseAudio(e);
      });
      this.backgroundAudioManager.onEnded(function(e) {
        that.playEnd(e, that);
      });
      this.backgroundAudioManager.onError(function(e) {
        that.playError(e);
      });
      this.backgroundAudioManager.onTimeUpdate(function(e) {
        if (that.backgroundAudioManager && that.backgroundAudioManager.currentTime) {
          that.sliderValue = 100 * (that.backgroundAudioManager.currentTime/that.musicInfo.bitrate.file_duration);
          that.updateStartTime(that, that.backgroundAudioManager.currentTime);
          that.$apply();
        }
      });
    }

    updateStartTime(that, currentTime) {
      that.startTime = parseInt(currentTime/60);
      var second = parseInt(currentTime%60);
      if (second >= 0 && second <= 9) {
        that.startTime = "0" + that.startTime + ":0" + second;
      } else {
        that.startTime = "0" + that.startTime + ":" + second;
      }
    }

    initMusicTime() {
      this.endTime = parseInt(this.musicInfo.bitrate.file_duration/60);
      var second = this.musicInfo.bitrate.file_duration%60;
      if (second >= 0 && second <= 9) {
        this.endTime = "0" + this.endTime + ":0" + second;
      } else {
        this.endTime = "0" + this.endTime + ":" + second;
      }
    }

    pauseAudio(e) {
      wepy.pauseBackgroundAudio();
      this.pausedIcon = "../images/pause.png";
      this.hasAnim = false;
      this.$apply();
    }

    playEnd(e, that) {
      that.hasAnim = false;
      if (that.playMode === this.Const.PLAY_MODE.LIST_CYCLE) {
        that.playNext();

      } else if (that.playMode === this.Const.PLAY_MODE.ONE_CYCLE) {
        that.playMusic();

      } else if (that.playMode === this.Const.PLAY_MODE.RANDOW_CYCLE) {

      }
      that.$apply();
    }

    playError(e) {
      this.hasAnim = false;
    }

    onShareAppMessage(res) {
    return {
      title: 'Mini-Music:' + this.musicInfo.songinfo.title + '-' + this.musicInfo.songinfo.author,
      path: '/page/song_item_info?song_id=' + this.songId,
      imageUrl: this.musicImg,
    }
  }
}
</script>

<style lang="less">
  .back-home-menu {
    position: absolute;
    left: 40rpx;
    top: 20rpx;
    width: 60rpx;
    height: 60rpx;
  }

  .back-home-menu image {
    width: 60rpx;
    height: 60rpx;
  }

  .share-song-menu {
    position: absolute;
    right: 40rpx;
    top: 20rpx;
    width: 60rpx;
    height: 60rpx;
  }

  .share-song-menu button {
    position: absolute;
    background: none;
    width: 60rpx;
    height: 60rpx;
  }

  .share-song-menu button:after {
    border: none;
  }

  .share-song-menu image {
    position: absolute;
    width: 60rpx;
    height: 60rpx;
    line-height: 60rpx;
  }

  .info-author {
    text-align: center;
    height: 50rpx;
    line-height: 50rpx;
    margin-top: 20rpx;
    color: #d81e06;
    font-size: 35rpx;
  }

  .info-album {
    text-align: center;
    height: 50rpx;
    line-height: 50rpx;
    margin-top: 20rpx;
    font-size: 25rpx;
  }

  .info-img {
    border-radius: 50%;
    display: block;
    width: 90%;
    min-height: 675rpx;
    max-height: 100%;
    margin-top: 50rpx;
    background-color: #ccc;
    -webkit-animation:rotateImg 0s linear infinite;
  }

  .info-img-anim {
    border-radius: 50%;
    display: block;
    width: 90%;
    min-height: 675rpx;
    max-height: 100%;
    margin-top: 50rpx;
    background-color: #ccc;
    -webkit-animation:rotateImg 30s linear infinite;
  }

  @keyframes rotateImg {
    0% {transform : rotate(0deg);}
    100% {transform : rotate(360deg);}
  }

  @-webkit-keyframes rotateImg {
    0%{-webkit-transform : rotate(0deg);}
    100%{-webkit-transform : rotate(360deg);}
  }

  .menu-container {
    position: absolute;
    width: 100%;
    height: 170rpx;
    line-height: 100rpx;
    bottom: 100rpx;
  }

  .menu {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: space-around;
    width: 100%;
  }

  .music-menu {
    display: flex;
    flex-direction: row;
    align-items: center;
  }

  .menu-icon {
    display: block;
    width: 60rpx;
    height: 60rpx;
  }

  .play-mode {
    width: 50rpx;
    height: 50rpx;
  }

  .pause {
    width: 80rpx;
    height: 80rpx;
    margin: 0rpx 80rpx;
  }

  .list {
    width: 50rpx;
    height: 40rpx;
  }

  .slider-container {
    display: flex;
    flex-direction: space-around;
    align-items: center;
    flex-wrap: nowrap;
    margin: 0 40rpx;
  }

  .slider-time {
    font-size: 20rpx;
    display: inline-block;
  }

  .slider {
    display: inline-block;
    width: 75%;
  }
</style>