<template>
  <view class="container">
    <text class="info-author" @tap="getAuthorInfo">歌手：{{musicInfo.songinfo.author}}</text>
    <text class="info-album" bindtap="getAlbumInfo">专辑：{{musicInfo.songinfo.album_title}}</text>
    <image class="info-img" mode="widthFix" src="{{musicImg}}" @tap="showBigImg"/>

    <view class="menu-container">
      <view class="slider-container">
        <text class="slider-time">{{startTime}}</text>
        <slider class="slider" bindchange="slider4Change" min="0" max="100" block-size="12" value="{{sliderValue}}"/>
        <text class="slider-time">{{endTime}}</text>
      </view>
      <view class="menu">
        <image class="menu-icon play-mode" src="{{playModeIcon}}" @tap="switchPlayMode"></image>
        <view  class="music-menu">
          <image class="menu-icon pre" src="../images/pre.png" bindtap="pre"></image>
          <image class="menu-icon pause" src="{{pausedIcon}}" bindtap="pauseOrPlay"></image>
          <image class="menu-icon next" src="../images/next.png" bindtap="next"></image>
        </view>
        <image class="menu-icon list" src="../images/list.png" bindtap="playList"></image>
      </view>
    </view>
  </view>
</template>

<script>
  import wepy from 'wepy'
  import BasePage from './basepage'
  import HttpRequest from '../utils/http-request'
  import ToastUtil from '../utils/toast-util'

  export default class SongItemInfo extends BasePage {
    config = {
      navigationBarTitleText: '歌曲信息',
    }
    components = {
      
    }

    data = {
      songId: '',
      musicInfo: undefined,
      musicImg: '',
      backgroundAudioManager: undefined,
      pausedIcon: "../images/play.png",
      Const: undefined,
      playMode: undefined,
      playModeIcon: '../images/list_cycle.png',
      sliderValue: 1,
      startTime: '00:00',
      endTime: '00:00',
    }

    computed = {
      
    }

    methods = {
      getAlbumInfo(e) {
        console.log("getAlbumInfo ->" + e);
      },

      getAuthorInfo(e) {
        console.log("getAuthorInfo() ->" + e);
      },

      switchPlayMode(e) {
        if (this.playMode === this.Const.PLAY_MODE.LIST_CYCLE) {
          this.playMode = this.Const.PLAY_MODE.ONE_CYCLE;
          this.playModeIcon = '../images/single_cycle.png';

        } else if(this.playMode === this.Const.PLAY_MODE.ONE_CYCLE) {
          this.playMode = this.Const.PLAY_MODE.RANDOM_CYCLE;
          this.playModeIcon = '../images/random_cycle.png';

        } else if (this.playMode === this.Const.PLAY_MODE.RANDOM_CYCLE) {
          this.playMode = this.Const.PLAY_MODE.LIST_CYCLE;
          this.playModeIcon = '../images/list_cycle.png';
        }
        this.$apply();
      },

      pre(e) {

      },

      pauseOrPlay(e) {
        let paused = this.backgroundAudioManager.paused;
        if (paused) {
          this.playMusic();
        } else {
          this.pauseAudio();
        }
      },

      next(e) {

      },

      playList(e) {

      },

      showBigImg(e) {
        wepy.previewImage({
          current: this.musicImg,
          urls: [this.musicImg],
        });
      },

      slider4Change(e) {
        console.log(e);
      },
    }

    onLoad(options) {
      console.log(options);
      this.songId = options.song_id;
    }

    onReady() {
      this.getMusicInfo();
      this.Const = require('../utils/const');
      this.playMode = this.Const.PLAY_MODE.LIST_CYCLE;
      this.$apply();
    }

    async getMusicInfo() {
      let res = await HttpRequest.getMusicInfo(this.songId);
      this.musicInfo = res.data;
      console.log(this.musicInfo);

      this.setNavigationBarMusicTitle(this.musicInfo.songinfo.title);
      this.setMusicImg();
      this.playMusic();
      this.initAudioMananger();
      this.initMusicTime();
      this.$apply();
    }

    setNavigationBarMusicTitle(songTitle) {
      if (songTitle) {
        wepy.setNavigationBarTitle({
          title: songTitle,
        });
      }
    }

    setMusicImg() {
      this.musicImg = this.musicInfo.songinfo.pic_huge;
      if (!this.musicImg) {
        this.musicImg = this.musicInfo.songinfo.pic_big;
      }
      if (!this.musicImg) {
        this.musicImg = this.musicInfo.songinfo.pic_premium;
      }
      if (!this.musicImg) {
        this.musicImg = this.musicInfo.songinfo.pic_small;
      }
      //默认图片
      if (!this.musicImg) {
        this.musicImg = "http://p4.music.126.net/53yErDUlZ6cP9GhK6EnZig==/1399678303632262.jpg";
      }
    }

    playMusic() {
      if (!this.musicInfo.bitrate.file_link) {
        ToastUtil.showToast('没有有效的歌曲文件');
        return;
      }
      wepy.playBackgroundAudio({
          dataUrl: this.musicInfo.bitrate.file_link,
          title: this.musicInfo.songinfo.title,
          coverImgUrl: this.musicImg,
      });
      this.pausedIcon = "../images/play.png";
      this.$apply();
    }

    initAudioMananger() {
      let that = this;
      this.backgroundAudioManager = wepy.getBackgroundAudioManager();
      this.backgroundAudioManager.onStop(function(e) {
        console.log("onStop ->" + e);
      });
      this.backgroundAudioManager.onPause(function(e) {
        that.pauseAudio(e);
      });
      this.backgroundAudioManager.onEnded(function(e) {
        that.playEnd(e, that);
      });
      this.backgroundAudioManager.onError(function(e) {
        that.playError(e);
      });
      this.backgroundAudioManager.onTimeUpdate(function(e) {
        that.sliderValue = 100 * (that.backgroundAudioManager.currentTime/that.musicInfo.bitrate.file_duration);
        console.log(that.sliderValue);
        that.updateStartTime(that, that.backgroundAudioManager.currentTime);
        that.$apply();
      });
      console.log(this.backgroundAudioManager);
    }

    updateStartTime(that, currentTime) {
      that.startTime = parseInt(currentTime/60);
      that.startTime = "0" + that.startTime + ":" + parseInt(currentTime%60);
      console.log("update start time:" + that.startTime);
    }

    initMusicTime() {
      this.endTime = parseInt(this.musicInfo.bitrate.file_duration/60);
      this.endTime = "0" + this.endTime + ":" + this.musicInfo.bitrate.file_duration%60;
      console.log("init music end time:" + this.endTime);
    }

    pauseAudio(e) {
      wepy.pauseBackgroundAudio();
      this.pausedIcon = "../images/pause.png";
      this.$apply();
    }

    playEnd(e, that) {
      if (that.playMode === this.Const.PLAY_MODE.LIST_CYCLE) {


      } else if (that.playMode === this.Const.PLAY_MODE.ONE_CYCLE) {
        that.playMusic();

      } else if (that.playMode === this.Const.PLAY_MODE.RANDOW_CYCLE) {

      }
    }

    playError(e) {
      console.log("play error");
    }

    onShareAppMessage(res) {
    return {
      title: 'Mini-Music:' + this.musicInfo.songinfo.title + '-' + this.musicInfo.songinfo.author,
      path: '/page/song_item_info?song_id=' + this.songId,
      imageUrl: this.musicImg,
    }
  }
}
</script>

<style lang="less">
  .info-author {
    text-align: center;
    height: 50rpx;
    line-height: 50rpx;
    margin-top: 20rpx;
    color: #d81e06;
    font-size: 35rpx;
  }

  .info-album {
    text-align: center;
    height: 50rpx;
    line-height: 50rpx;
    margin-top: 20rpx;
    font-size: 25rpx;
  }

  .info-img {
    border-radius: 50%;
    display: block;
    width: 90%;
    min-height: 675rpx;
    max-height: 100%;
    margin-top: 50rpx;
    background-color: #ccc;
    -webkit-animation:rotateImg 30s linear infinite;
  }

  @keyframes rotateImg {
    0% {transform : rotate(0deg);}
    100% {transform : rotate(360deg);}
  }

  @-webkit-keyframes rotateImg {
    0%{-webkit-transform : rotate(0deg);}
    100%{-webkit-transform : rotate(360deg);}
  }

  .menu-container {
    position: absolute;
    width: 100%;
    height: 150rpx;
    line-height: 100rpx;
    bottom: 60rpx;
  }

  .menu {
    display: flex;
    flex-direction: row;
    align-items: center;
    justify-content: space-around;
    width: 100%;
  }

  .music-menu {
    display: flex;
    flex-direction: row;
    align-items: center;
  }

  .menu-icon {
    display: block;
    width: 60rpx;
    height: 60rpx;
  }

  .play-mode {
    width: 50rpx;
    height: 50rpx;
  }

  .pause {
    width: 80rpx;
    height: 80rpx;
    margin: 0rpx 80rpx;
  }

  .list {
    width: 50rpx;
    height: 40rpx;
  }

  .slider-container {
    display: flex;
    flex-direction: space-around;
    align-items: center;
    flex-wrap: nowrap;
    margin: 0 40rpx;
  }

  .slider-time {
    font-size: 20rpx;
    display: inline-block;
  }

  .slider {
    display: inline-block;
    width: 75%;
  }
</style>